(() => {
  "use strict";
  window.addEventListener("DOMContentLoaded", () => {
    let e = document.querySelector(".header-burger"),
      t = document.querySelector(".header-list");
    e.addEventListener("click", () => {
      e.classList.toggle("active"), t.classList.toggle("active");
    });
  });
})();

// const host = "http://localhost:8000";
const host = "https://restaurant.panasyuk-danil.ru";

async function validateForm(event) {
  event.preventDefault(); // Предотвращаем стандартное поведение формы

  const fullName = document.getElementById("name");
  const peopleCount = document.getElementById("people-count");
  const date = document.getElementById("date-select");
  const email = document.getElementById("email");
  const time = document.getElementById("time-select");
  const phoneNumber = document.getElementById("number");

  if (fullName.value.trim() === '') {
      alert('Please enter your full name.');
      return false;
  }
  
  if (peopleCount.value.trim() === '' || isNaN(peopleCount.value)) {
      alert('Please enter a valid number of people.');
      return false;
  }
  
  const datePattern = /^\d{2}\/\d{2}\/\d{4}$/; // regex паттерн
  if (!datePattern.test(date.value.trim())) {
      alert('Please enter a valid date in the format MM/DD/YYYY.');
      return false;
  }
  
  if (email.value.trim() === '' || !email.checkValidity()) {
      alert('Please enter a valid email address.');
      return false;
  }
  
  const timePattern = /^([0-9]{2}):([0-9]{2})$/; // regex паттерн
  if (!timePattern.test(time.value.trim())) {
      alert('Please enter a valid time in the format HH:mm.');
      return false;
  }
  
  const phoneNumberPattern = /^\+(7|8)\d{3}\d{3}\d{2}\d{2}$/; // regex паттерн
  if (!phoneNumberPattern.test(phoneNumber.value.trim())) {
      alert('Please enter a valid phone number in the format +8-XXX-XXX-XX-XX.');
      return false;
  }

  // Данные валидны, получаем список столиков
  const tables = await fetchTables(date.value.trim(), time.value.trim());
  if (tables && tables.length > 0) {
      showTables(tables);
  } else {
      alert('No tables available.');
      return false;
  }

  return false; // Предотвращаем отправку формы до выбора столика
}

async function fetchTables(date, time) {
  try {
    const [month, day, year] = date.split('/');
    const [hours, minutes] = time.split(':');

    const datetimeObj = new Date(year, month - 1, day, hours, minutes);
    const formattedDatetime = datetimeObj.toISOString();

    const response = await axios.get(host + '/api/v1/table/', {
      params: { datetime: formattedDatetime },
    });
    return response.data.data;
  } catch (error) {
    console.error('Error fetching tables:', error);
    return [];
  }
}

function showTables(tables) {
  const modal = document.getElementById("tableModal");
  const tableSelection = document.querySelector('.table-selection');
  tableSelection.innerHTML = ''; // Очистка старых данных
  tableSelection.style.display = "block";

  tables.forEach(table => {
      const tableDiv = document.createElement('div');
      tableDiv.classList.add('table');
      tableDiv.classList.add(table.status); // Добавляем класс в зависимости от статуса
      tableDiv.textContent = `Table ${table.id}: ${table.number_seats} seats`;
      if (table.status === 'available') {
          tableDiv.onclick = () => selectTable(table.id);
      }

      tableSelection.appendChild(tableDiv);
      console.log(`Added table: ${table.id}, status: ${table.status}`); // Лог добавления столика
  });

  console.log('Tables shown:', tables); // Проверка вывода данных
  modal.style.display = "block";
}

function selectTable(tableId) {
  document.getElementById('selected-table').value = tableId;
  document.getElementById("tableModal").style.display = "none";
  document.querySelector('.book-form').submit();
}

// Функция для форматирования даты в формате MM / DD / YYYY
function formatDate(date) {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${month}/${day}/${year}`;
}

// Функция для форматирования времени в формате HH:00
function formatTime(hour) {
  return `${String(hour).padStart(2, '0')}:00`;
}

// Получение текущей даты
const today = new Date();

async function sendBookingData(data) {
  try {
      const formBody = new URLSearchParams(data);

      const token = localStorage.getItem('access_token');
      const response = await fetch(host + '/api/v1/booking/', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Authorization': `Bearer ${token}`
          },
          body: formBody.toString()
      });

      const result = await response.json();
      console.log('Booking response:', result);

        // Обработка ответа от сервера
        if (response.ok) {
            if (result.error) {
                alert(`Error: ${result.error}`);
            } else if (result.message) {
                alert(`Success: ${result.message}`);
            }
        } else {
            alert('Booking failed. Please try again.');
        }
  } catch (error) {
      console.error('Error sending booking data:', error);
      alert('An error occurred. Please try again.');
  }
}

function selectTable(tableId) {
  document.getElementById('selected-table').value = tableId;

  // Собираем данные формы
  const fullName = document.getElementById("name").value;
  const peopleCount = document.getElementById("people-count").value;
  const date = document.getElementById("date-select").value;
  const email = document.getElementById("email").value;
  const time = document.getElementById("time-select").value;
  const phoneNumber = document.getElementById("number").value;

  const [month, day, year] = date.split('/');
  const [hours, minutes] = time.split(':');
  const datetimeObj = new Date(year, month - 1, day, hours, minutes);
  const formattedDatetime = datetimeObj.toISOString();


  // Формируем объект данных для отправки
  const bookingData = {
      table_id: tableId,
      datetime: formattedDatetime,
      phone: phoneNumber,
      email: email,
      count_seats: peopleCount,
      fullname: fullName,
      number_of_people: peopleCount
  };

  console.log('Booking data:', bookingData);

  // Отправляем данные на сервер
  sendBookingData(bookingData);

  // Закрываем модальное окно
  document.getElementById("tableModal").style.display = "none";
}

document.addEventListener('DOMContentLoaded', () => {
  const form = document.querySelector('.book-form');
  form.addEventListener('submit', validateForm);

  // Обработчик закрытия модального окна
  const closeModal = document.querySelector('.close');
  closeModal.onclick = function() {
      document.getElementById("tableModal").style.display = "none";
  }
  window.onclick = function(event) {
      if (event.target == document.getElementById("tableModal")) {
          document.getElementById("tableModal").style.display = "none";
      }
  }

  // Проверка загрузки скрипта
  console.log('DOMContentLoaded event triggered');

  // Заполнение списка дат и времени
  const dateSelect = document.getElementById('date-select');
  for (let i = 0; i < 30; i++) {
      const dateOption = new Date();
      dateOption.setDate(today.getDate() + i);
      const option = document.createElement('option');
      option.value = formatDate(dateOption);
      option.text = formatDate(dateOption);
      dateSelect.appendChild(option);
  }

  const timeSelect = document.getElementById('time-select');
  const currentHour = today.getHours();
  for (let hour = 0; hour < 24; hour++) {
      const option = document.createElement('option');
      option.value = formatTime(hour);
      option.text = formatTime(hour);
      timeSelect.appendChild(option);
  }

  // Устанавливаем значение по умолчанию на следующий час
  let defaultHour = currentHour + 2;
  if (defaultHour >= 24) defaultHour -= 24;
  timeSelect.value = formatTime(defaultHour);
});

// ...

(() => {
  "use strict";
  window.addEventListener("DOMContentLoaded", () => {
    const e = document.querySelector(".header-burger"),
          t = document.querySelector(".header-list");
    e.addEventListener("click", () => {
      e.classList.toggle("active"), t.classList.toggle("active");
    });

    const authButton = document.getElementById('auth-button');
    const adminMenu = document.getElementById('admin-menu');
    const bookingsButton = document.getElementById('bookings-button');
    const categoriesButton = document.getElementById('categories-button');
    const foodsButton = document.getElementById('foods-button');
    const logoutButton = document.getElementById('logout-button');
    const menuButton = document.querySelector('.header-list__link[href="#menu"]');

    const authModal = document.getElementById('auth-modal');
    const bookingsModal = document.getElementById('bookings-modal');
    const categoriesModal = document.getElementById('categories-modal');
    const foodsModal = document.getElementById('foods-modal');
    const menuModal = document.getElementById('menu-modal');
    const tableSelectionModal = document.getElementById('table-selection-modal');

    const closeAuthModal = document.getElementById('close-auth-modal');
    const closeBookingsModal = document.getElementById('close-bookings-modal');
    const closeCategoriesModal = document.getElementById('close-categories-modal');
    const closeFoodsModal = document.getElementById('close-foods-modal');
    const closeMenuModal = document.getElementById('close-menu-modal');
    const closeTableSelectionModal = document.getElementById('table-selection-close');

    const menuCardsContainer = document.querySelector('.menu-cards-container');

    authButton.addEventListener('click', () => {
      authModal.style.display = 'block';
      document.body.classList.add('no-scroll');
    });
    bookingsButton.addEventListener('click', () => {
      bookingsModal.style.display = 'block';
      document.body.classList.add('no-scroll');
    });
    categoriesButton.addEventListener('click', () => {
      categoriesModal.style.display = 'block';
      document.body.classList.add('no-scroll');
    });
    foodsButton.addEventListener('click', async () => {
      foodsModal.style.display = 'block';
      document.body.classList.add('no-scroll');
      await fetchCategories();
    });
    logoutButton.addEventListener('click', () => {
      adminMenu.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    menuButton.addEventListener('click', async () => {
      menuModal.style.display = 'block';
      document.body.classList.add('no-scroll');
      await fetchMenuItems();
    });
    
    closeAuthModal.addEventListener('click', () => {
      authModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    closeBookingsModal.addEventListener('click', () => {
      console.log("asdasgf");
      bookingsModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    closeCategoriesModal.addEventListener('click', () => {
      categoriesModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    closeFoodsModal.addEventListener('click', () => {
      foodsModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    closeMenuModal.addEventListener('click', () => {
      menuModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    });
    closeTableSelectionModal.addEventListener('click', () => {
      tableModal.style.display = 'none';
      document.body.classList.remove('no-scroll');
    })
    
    window.addEventListener('click', (event) => {
      if (event.target == authModal) {
        authModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
      }
      if (event.target == bookingsModal) {
        bookingsModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
      }
      if (event.target == categoriesModal) {
        categoriesModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
      }
      if (event.target == foodsModal) {
        foodsModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
      }
      if (event.target == menuModal) {
        menuModal.style.display = 'none';
        document.body.classList.remove('no-scroll');
      }
    });
  
    // Проверка авторизации при загрузке страницы
    checkAuth();

    // Authorization form submission
    document.getElementById('auth-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const email = document.getElementById('auth-email').value;
      const password = document.getElementById('auth-password').value;

      try {
          const response = await axios.post(host + '/api/v1/auth/login',
            new URLSearchParams({ email, password })
          );

        if (response.status === 200 && response.data?.data?.access_token) {
          localStorage.setItem('access_token', response.data.data.access_token)

          authModal.style.display = 'none';
          authButton.style.display = 'none';
          adminMenu.style.display = 'block';
        }
      } catch (error) {
        console.log(error);
        if (error.status === 403) {
          alert('access denied');
        } else {
          alert('Login failed');
        }
      }
    });

    // Fetch and display bookings
    bookingsButton.addEventListener('click', async () => {
      bookingsModal.style.display = 'block';
      try {
        const token = localStorage.getItem('access_token');
        const response = await axios.get(host + '/api/v1/booking/', {
          headers: {'Authorization': `Bearer ${token}`}
        });
        const bookings = response.data.data;
        console.log(bookings);
        const bookingsTableBody = document.querySelector('#bookings-table tbody');
        bookingsTableBody.innerHTML = '';

        bookings.forEach(booking => {
          const row = document.createElement('tr');
          const localDateTime = formatDateTime(booking.datetime)
          row.innerHTML = `
            <td>${booking.id}</td>
            <td>${booking.table_id}</td>
            <td>${localDateTime}</td>
            <td>${booking.fullname}</td>
            <td>${booking.phone}</td>
            <td>${booking.email}</td>
            <td>${booking.count_seats}</td>
            <td><button data-id="${booking.id}" class="delete-booking">Delete</button></td>
          `;
          bookingsTableBody.appendChild(row);
        });

        document.querySelectorAll('.delete-booking').forEach(button => {
          button.addEventListener('click', async () => {
            const id = button.dataset.id;
            await axios.delete(host + `/api/v1/booking/${id}`, {
               headers: {'Authorization': `Bearer ${token}`}
            });
            button.parentElement.parentElement.remove();
          });
        });
      } catch (error) {
        console.error('Error fetching bookings:', error);
      }
    });

    // Fetch and display categories
    categoriesButton.addEventListener('click', async () => {
      categoriesModal.style.display = 'block';
      try {
        const token = localStorage.getItem('access_token');
        const response = await axios.get(host + '/api/v1/category/', {
          headers: {'Authorization': `Bearer ${token}`}
        });
        const categories = response.data.data;
        const categoriesTableBody = document.querySelector('#categories-table tbody');
        categoriesTableBody.innerHTML = '';

        categories.forEach(category => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${category.id}</td>
            <td>${category.name}</td>
            <td><button data-id="${category.id}" class="delete-category">Delete</button></td>
          `;
          categoriesTableBody.appendChild(row);
        });

        document.querySelectorAll('.delete-category').forEach(button => {
          button.addEventListener('click', async () => {
            const id = button.dataset.id;
            await axios.delete(host + `/api/v1/category/${id}`, {
              headers: {'Authorization': `Bearer ${token}`}
            });
            button.parentElement.parentElement.remove();
          });
        });
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    });

    // Create new category
    document.getElementById('create-category-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const name = document.getElementById('category-name').value;

      try {
        const token = localStorage.getItem('access_token');
        await axios.post(host + '/api/v1/category/',
          new URLSearchParams({ name }),
          { headers: {'Authorization': `Bearer ${token}`} }
        );
        categoriesModal.style.display = 'none';
        categoriesButton.click();
      } catch (error) {
        console.error('Error creating category:', error);
      }
    });

    // Fetch and display foods
    foodsButton.addEventListener('click', async () => {
      foodsModal.style.display = 'block';
      try {
        const token = localStorage.getItem('access_token');
        const response = await axios.get(host + '/api/v1/food/',
            { headers: {'Authorization': `Bearer ${token}`}}
            );
        const foods = response.data.data;
        const categoriesResponse = await axios.get(host + '/api/v1/category/',
            { headers: {'Authorization': `Bearer ${token}`}}
        );
        const categories = categoriesResponse.data.data;

        const foodsTableBody = document.querySelector('#foods-table tbody');
        foodsTableBody.innerHTML = '';

        foods.forEach(food => {
          const category = categories.find(cat => cat.id === food.category_id);
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${food.id}</td>
            <td>${food.name}</td>
            <td>${food.description}</td>
            <td>${(food.cost).toFixed(2)} р.</td>
            <td>${category ? category.name : ''}</td>
            <td><img src="${food.picture}" alt="${food.name}" width="50"></td>
            <td><button data-id="${food.id}" class="delete-food">Delete</button></td>
          `;
          foodsTableBody.appendChild(row);
        });

        document.querySelectorAll('.delete-food').forEach(button => {
          button.addEventListener('click', async () => {
            const id = button.dataset.id;
            await axios.delete(host + `/api/v1/food/${id}`,
                {headers:{'Authorization': `Bearer ${token}`}});
            button.parentElement.parentElement.remove();
          });
        });
      } catch (error) {
        console.error('Error fetching foods:', error);
      }
    });

    // Create new food
    document.getElementById('create-food-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const name = document.getElementById('food-name').value;
      const description = document.getElementById('food-description').value;
      const cost = parseFloat(document.getElementById('food-cost').value) * 100;
      const category_id = document.getElementById('food-category').value;
      const picture = document.getElementById('food-picture').value;

      try {
        const token = localStorage.getItem('access_token');
        await axios.post(host + '/api/v1/food/',
          new URLSearchParams({ name, description, cost, category_id, picture }),
            {headers: {'Authorization': `Bearer ${token}`}}
        );
        foodsModal.style.display = 'none';
        foodsButton.click();
      } catch (error) {
        console.error('Error creating food:', error);
      }
    }); 

    async function fetchMenuItems() {
      try {
        const response = await fetch(host + '/api/v1/food/');
        const menuItems = await response.json();
  
        menuCardsContainer.innerHTML = ''; // Очистка контейнера перед добавлением новых карточек
  
        menuItems?.data.forEach(item => {
          const card = document.createElement('div');
          card.classList.add('menu-card');
          
          card.innerHTML = `
            <img src="${item.picture}" alt="${item.name}">
            <div class="menu-card-content">
              <h3>${item.name}</h3>
              <p>${item.description}</p>
              <p class="price">${(item.cost / 100).toFixed(2)} р.</p>
            </div>
          `;
  
          menuCardsContainer.appendChild(card);
        });
      } catch (error) {
        console.error('Error fetching menu items:', error);
      }
    }

async function fetchCategories() {
  try {
    const token = localStorage.getItem('access_token');
    const response = await axios.get(host + '/api/v1/category/', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const categories = response.data.data;
    const categorySelect = document.getElementById('food-category');
    categorySelect.innerHTML = ''; // Очистка существующих опций

    categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category.id;
      option.textContent = category.name;
      categorySelect.appendChild(option);
    });
  } catch (error) {
    console.error('Error fetching categories:', error);
  }
}

    // Logout
    logoutButton.addEventListener('click', async () => {
      try {
        localStorage.removeItem('access_token');
        adminMenu.style.display = 'none';
        authButton.style.display = 'block';
      } catch (error) {
        console.error('Error logging out:', error);
      }
    });

    // Проверка авторизации
    function checkAuth() {
      const sessionId = localStorage.getItem('access_token');
      if (sessionId) {
        authButton.style.display = 'none';
        adminMenu.style.display = 'block';
      } else {
        authButton.style.display = 'block';
        adminMenu.style.display = 'none';
      }
    }

    // Парсинг куков из строки
    function parseCookies(cookieString) {
      const cookies = {};
      cookieString.split(';').forEach(cookie => {
        const [name, value] = cookie.split('=').map(c => c.trim());
        cookies[name] = value;
      });
      return cookies;
    }
  });
})();

function formatDateTime(datetimeUTC) {
  const dateObj = new Date(datetimeUTC); // преобразует UTC-дату в локальную
  const day = dateObj.getDate().toString().padStart(2, '0');
  const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
  const year = dateObj.getFullYear();
  const hours = dateObj.getHours().toString().padStart(2, '0');
  const minutes = dateObj.getMinutes().toString().padStart(2, '0');
  return `${day}-${month}-${year} ${hours}:${minutes}`;
}